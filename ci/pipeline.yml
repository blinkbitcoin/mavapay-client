#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ load("vendor/pipeline-fragments.lib.yml",
#@   "repo_resource",
#@   "nodejs_audit",
#@   "nodejs_deps_resource",
#@   "pipeline_tasks_resource",
#@   "deps_version_resource",
#@   "bundled_deps_resource",
#@   "gh_release_resource",
#@   "version_resource",
#@   "release_task_image_config",
#@   "nodejs_task_image_config",
#@   "slack_resource",
#@   "gcr_resource_type",
#@   "slack_resource_type")


#! Do nothing for now!
#@ def slack_failure_notification():
#@ return None
#@ end


#@ def nodejs_check_code():
name: check-code
serial: true
plan:
- in_parallel:
  - { get: repo, trigger: true }
  - { get: pipeline-tasks }
  - { get: bundled-deps, trigger: true}
- task: check-code
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: bundled-deps
    - name: pipeline-tasks
    - name: repo
    run:
      path: pipeline-tasks/ci/tasks/nodejs-check-code.sh #! that's the change
on_failure: #@ slack_failure_notification()
#@ end

#! copy from pipeline-fragments.lib.yml
#@ def install_pnpm_deps():
name: install-deps
plan:
- in_parallel:
  - {get: deps, trigger: true}
  - {get: pipeline-tasks}
  - {put: deps-version, params: {bump: patch}}
- task: install-deps
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: pipeline-tasks
    - name: deps
    - name: deps-version
    outputs:
    - name: bundled-deps
    run:
      path: pipeline-tasks/ci/vendor/tasks/cache-pnpm-deps.sh #! that's the change
- put: bundled-deps
  params:
    file: bundled-deps/bundled-deps-*.tgz
on_failure: #@ slack_failure_notification()
#@ end

#! This is copied from galoy-client and it's a hot candidate to move into 
#@ def test():
name: test
serial: true
plan:
- in_parallel:
  - { get: repo, trigger: true }
  - { get: bundled-deps, trigger: true }
  - { get: pipeline-tasks }
- task: test
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: bundled-deps
    - name: pipeline-tasks
    - name: repo
    run:
      path: pipeline-tasks/ci/tasks/test.sh
#@ end

#@ def build():
name: build
serial: true
plan:
- in_parallel:
  - { get: repo, trigger: true }
  - { get: bundled-deps, trigger: true }
  - { get: pipeline-tasks }
- task: build
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: bundled-deps
    - name: pipeline-tasks
    - name: repo
    outputs:
    - name: repo
    run:
      path: pipeline-tasks/ci/tasks/build.sh
#@ end

#@ def release():
name: release
serial: true
plan:
- in_parallel:
  - get: repo
    passed:
    - check-code
    - test
    - build
    - audit
  - get: bundled-deps
  - get: pipeline-tasks
  - get: version
- task: prep-release
  config:
    platform: linux
    image_resource: #@ release_task_image_config()
    inputs:
    - name: pipeline-tasks
    - name: repo
    - name: version
    outputs:
    - name: version
    - name: artifacts
    run:
      path: pipeline-tasks/ci/vendor/tasks/prep-release-src.sh
- task: build
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: bundled-deps
    - name: pipeline-tasks
    - name: repo
    outputs:
    - name: repo
    run:
      path: pipeline-tasks/ci/tasks/build.sh
- task: update-repo
  config:
    platform: linux
    image_resource: #@ nodejs_task_image_config()
    inputs:
    - name: pipeline-tasks
    - name: repo
    - name: version
    outputs:
    - name: repo
    run:
      path: pipeline-tasks/ci/vendor/tasks/nodejs-update-package-json.sh
- put: repo-out
  params:
    tag: artifacts/gh-release-tag
    repository: repo
    rebase: true
- put: gh-release
  params:
    name: artifacts/gh-release-name
    tag: artifacts/gh-release-tag
    body: artifacts/gh-release-notes.md
- put: npm-release
  params:
    path: repo
    version: version/version
    public: true
- put: version
  params:
    file: version/version
#@ end




jobs:
- #@ nodejs_check_code()
- #@ nodejs_audit()
- #@ install_pnpm_deps()
- #@ test()
- #@ build()
- #@ release()


resources:
- #@ repo_resource()
- #@ nodejs_deps_resource( pckgMgr="pnpm")
- #@ pipeline_tasks_resource()
- #@ deps_version_resource()
- #@ bundled_deps_resource()
- #@ version_resource()
- #@ gh_release_resource()
- #@ slack_resource()
- name: repo-out
  type: git
  source:
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: npm-release
  type: npm
  source:
    package: mavapay-client
    scope: k9ert
    registry:
      uri: https://registry.npmjs.org/
      token: #@ data.values.npm_token

resource_types:
- #@ gcr_resource_type()
- #@ slack_resource_type()
